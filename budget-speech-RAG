{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "collapsed": true,
    "id": "LwkZF0Cy5_TU",
    "outputId": "3abab8e1-cfda-4cf8-eeaf-33f4fb8737e8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/765.0 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m765.0/765.0 kB\u001b[0m \u001b[31m37.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/309.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m309.7/309.7 kB\u001b[0m \u001b[31m25.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m470.2/470.2 kB\u001b[0m \u001b[31m38.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m78.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m62.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m48.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m14.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m94.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install --upgrade --quiet pinecone-client openai langchain pypdf sentence-transformers\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "collapsed": true,
    "id": "7QIr-rtM6qTY",
    "outputId": "67116f28-d156-4281-8776-fe25b34c3f4a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting PyPDF2\n",
      "  Downloading pypdf2-3.0.1-py3-none-any.whl.metadata (6.8 kB)\n",
      "Downloading pypdf2-3.0.1-py3-none-any.whl (232 kB)\n",
      "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/232.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m232.6/232.6 kB\u001b[0m \u001b[31m15.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: PyPDF2\n",
      "Successfully installed PyPDF2-3.0.1\n"
     ]
    }
   ],
   "source": [
    "!pip install PyPDF2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "collapsed": true,
    "id": "aRVFWhFP6ZB0",
    "outputId": "fdaf2b6c-60ec-4035-811a-d7a47087e989"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GOVERNMENT OF INDIA\n",
      "BUDGET 2023-2024\n",
      "SPEECH\n",
      "OF\n",
      "NIRMALA SITHARAMAN\n",
      "MINISTER OF FINANCE\n",
      "February 1,  2023CONTENTS \n",
      "PART-A \n",
      " Page No.  \n",
      " Introduction 1 \n",
      " Achievements since 2014: Leaving no one behind 2 \n",
      " Vision for Amrit Kaal  – an empowered and inclusive economy 3 \n",
      " Priorities of this Budget 5 \n",
      "i. Inclusive Development  \n",
      "ii. Reaching the Last Mile \n",
      "iii. Infrastructure and Investment \n",
      "iv. Unleashing the Potential \n",
      "v. Green Growth \n",
      "vi. Youth Power  \n",
      "vii. Financial Sector  \n",
      " \n",
      " \n",
      " \n",
      " \n",
      " \n",
      " \n",
      " \n",
      " \n",
      " Fiscal Management 24 \n",
      "PART B  \n",
      "  \n",
      "Indirect Taxes  27 \n",
      " Green Mobility  \n",
      " Electronics   \n",
      " Electrical   \n",
      " Chemicals and Petrochemicals   \n",
      " Marine products  \n",
      " Lab Grown Diamonds  \n",
      " Precious Metals  \n",
      " Metals  \n",
      " Compounded Rubber  \n",
      " Cigarettes  \n",
      "  \n",
      "Direct Taxes  30 \n",
      " MSMEs and Professionals   \n",
      " Cooperation  \n",
      " Start-Ups  \n",
      " Appeals  \n",
      " Better targeting of tax concessions  \n",
      " Rationalisation  \n",
      " Others  \n",
      " Personal Income Tax  \n",
      "  \n",
      "Annexures  35 \n",
      " Annexure to Part B of the Budget Speech 2023-\n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "import os\n",
    "from PyPDF2 import PdfReader\n",
    "\n",
    "# Set the file path\n",
    "pdf_path = Path(\"pine/pine/budget_speech.pdf\")\n",
    "\n",
    "# Load the PDF\n",
    "reader = PdfReader(str(pdf_path))\n",
    "\n",
    "# Extract text\n",
    "text = \"\"\n",
    "for page in reader.pages:\n",
    "    text += page.extract_text()\n",
    "\n",
    "print(text[:1000])  # preview the first 1000 characters\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "QOz8b5yx63YD",
    "outputId": "147d4f5d-238c-4948-9680-e72dbbef1710"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Split into 226 chunks\n"
     ]
    }
   ],
   "source": [
    "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
    "\n",
    "text_splitter = RecursiveCharacterTextSplitter(\n",
    "    chunk_size=500,\n",
    "    chunk_overlap=100\n",
    ")\n",
    "\n",
    "texts = text_splitter.split_text(text)\n",
    "print(f\"Split into {len(texts)} chunks\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 532,
     "referenced_widgets": [
      "bb03170099634b63b0b784a731e59bc8",
      "b62ab3a9e73d4114b630565a73573cf8",
      "6193d0b4be2b4682bf8a0e414a6eb267",
      "45ff0356245e4028844c897f1c556eb7",
      "2cd5001505fa40aeaefd7766d6bb6b66",
      "13a1668f92cc4fdfba203ac9a0b286e7",
      "234da4e4b86d40bcad07c72b82f0c8b3",
      "fae723f4c745456daf71d68898c2b678",
      "3c4f4a30d2b945afa669f9bb15205614",
      "963c43f09a4343239019fa18adae4537",
      "42d9d28d07a749149e5381d5b7129e75",
      "cf86fd77b10d49af84b064a7099d2475",
      "c638378189be46fda7cf6f006e1d170d",
      "ad069fdf71e348569c99710c4d4b0fa0",
      "d78bea9faaeb4364984bec7fd3d90574",
      "8bce903da18248898a094a5e5487f070",
      "c1d730ac29994a6687f4ae8d08bfce7f",
      "890fe34b310d437c9b8ad27fa9368b8c",
      "148eab51e4d84ed0aac16e57874b7505",
      "774a8038912b49d3b897d4df260b84ad",
      "1c574f1d917e4a67a0fb1c806367093d",
      "a4e2a787554548e5ad6dc6b9dbf06992",
      "d590795fed8341ecb255c79278e072a7",
      "c58bbd69c5444cdbb8b78fc81b5d7589",
      "0985982c4fc34bdba8f98805cd898ab0",
      "b8e46b20d49f4d41b8e52ac9c8bb2f75",
      "0ae76577d122488c9725fe46c874fe6a",
      "7ca13569302540babcbc3cbbaf652718",
      "bf1b22d1638e496797b854f6b31c4a18",
      "f033dd010c4f49c8afea4814c7298ad9",
      "30c9042d9b5a490e9f2927f65cbcb6f4",
      "03fa71de0b374787895dccc710047f7f",
      "3aed2a56daf74ef48ca6570ad02c75e0",
      "f21e37e360b34bbba3c6d6f40e9be868",
      "dd636cff173c456f90aa6e826ce6ffa6",
      "afcbcf0ed08c41ba9f2977154cba1df7",
      "73bf2eab880d4c849de26a88015b89fc",
      "6d2a9be4736547e2b37695f1a17f163a",
      "5494e424bd264cb1b7d10a40ef15e0e3",
      "4e3db2d519a3435da1b883e4d9330800",
      "7c52395ae7ab4d6fb5e8ca09e0d74e3d",
      "26ec2c165f174b64a7094a1fcb345c8e",
      "9b99986924ab4531af4362ee9587c3e2",
      "316371fc5f4342acbe5dd11ea7c6b0d0",
      "b2f60717c9174701b8cfd8c06b295054",
      "ce6c7a00e715474b9a76e97d3cf35498",
      "2770b98cad0d40e096b892f7e9328617",
      "4795180d4ff041a5b5fb01401189c019",
      "bd04533e0fd044a59e6a4d31075c71d0",
      "5e4e2d952450417da1caa65373a8caf5",
      "f4ea493a287449df8d8ce41fba6c149e",
      "1d73ab492c574e899ec8da73faa64163",
      "f1c0019d7be947e185f23d0b711749dd",
      "978085b15edc4820871d3ca4a8a57cf1",
      "27b70251c10a4e3a9119ed58e5a32ad4",
      "f75520edfbd8450fb76553ef23ca2cc3",
      "a47afed5706e44ca90c15cff9c277100",
      "3422c7ac211a40669f85b31cb3c73eb4",
      "dc8abb07755c437b97a783d0138eac8d",
      "3a84e15378824198b553bc34e397993c",
      "be8c8337c80847b287e7d52c7de25873",
      "e955a12a7263473e9861141c3551f4a5",
      "906dd00387124fc7a5cf8b929b864353",
      "54a661fa925349298c75595f805b5a39",
      "fed2a79d776d4a4bacb67230a8080c8f",
      "b9e7a87a8e3c4ca1a7cc98d83a86db47",
      "c43f85b0d2674ae2b5efa6bb9d6b71ce",
      "7c51a67dd74f4849a39241f4ab86ded7",
      "a8d6bb939bb04f789f054840ecc64768",
      "bd808c0542214627a5c002df36bb15f2",
      "25f8281b779c46ccbc464d418552ca8e",
      "10a9d35534a04612ab1fb6411ff58943",
      "a5bb93edbfab43d6a36a88e8b2a9d0c4",
      "809c71c4ce3144ef9dd88faa8b8bd51d",
      "4bef096dd3af430fa766188a0bdc3b14",
      "43df53103dcd47c4bd195f6ed5720d04",
      "8f113ab5fe6742479d8d279da5179746",
      "26f2cb4d62b8481d845f74108a87ab8f",
      "de705982c616437699257383a72c8cca",
      "9c8724383fa24afaa34cca97547c2569",
      "c0d05339aa4e4003b278175928c4b41b",
      "b75384d15d304ee1906fe7a0d2ff5558",
      "0234cd6042474bca99704c3b19969f98",
      "c265969bb9854171813579e9fac31c7f",
      "8d92b78a5f6a408aa833102cd1851f0d",
      "3869452e7d8542e4bed5db1b5bcd4038",
      "ff7bb45c92db41fdb6a19fb3e5ff5fdb",
      "27cb5ed1c5964cb4bc4b050402750d20",
      "0b746d12b71249b1ab221750cbbead93",
      "451ab37b94cd4301a21380fe8940afc7",
      "299c508ba3ca4ddd8fa5c35e9b727920",
      "662a5e1684b74a5d88d24c2c0e63a369",
      "52dc86a24a0f4f91905af81d77326e87",
      "fe2276dc67d74b90be42ef6229335890",
      "22c09d94bbad4bcdb9bf1395085872b3",
      "0936775c76c947ec86e9098bb56c690f",
      "0f096cb87e9b4ee7ae8c842967406ab3",
      "6ccc4ce8c9bf48609b7ec372a74fa9e8",
      "1fe9e6ea813c4d5b9ba8da3f056a4aee",
      "3e62c3b3c6ac45debdb7c5543caa29fd",
      "5ad084a130c1449c86459be0baa3248c",
      "744d12d4ef8646629a69e453b3dbbc54",
      "3ea3cf5e02af4309bc68c4a23c5d9fdc",
      "09ef8ebd39624083807d7f91632586ab",
      "e7ed1aba0c184008af0a0f353b1abaee",
      "447145bea8504a1dba21c638f3b1383f",
      "59fbdb1b934f42c28769d16f18694849",
      "9a4a9c104fda4cc6b3602e310ce9c22d",
      "e8e7256f68a74f90a8033ebd265b9b48",
      "d85acf9410224ffe995b18a3f91a35e4",
      "b37495a810344304a13508fafac371da",
      "4fe85759736f41f0bb9c2d7a0f5c7592",
      "6c83ae7b028f4c9e963d81955f7e64d1",
      "fa50f90ae64048e1bd36ee0d13f2593c",
      "d7ba1f93559a43f3868ef9b50904e4c8",
      "f8cfdb88d76047a5960e7b32deea55da",
      "4549400923514922b40c921fb70748e8",
      "9779afccb0434fdd84fb8f516c35aa89",
      "507a03763dab4e07b6492633e82e66d5",
      "ca05db5aa9b5487ab7cf9a672e6b2152",
      "ca360b498fc14388bf77a32bf2f7d120",
      "0fe3c086f28348a0b99270d3a1e58555",
      "1b8a4625cd9e4f5e9036dcfeed83be30",
      "9e9314b243094df7aea9f67ce946a26d",
      "73d04ca8c3014e11b1fc022458a77a21",
      "b8866978b032493a8f8012e0b07920d4",
      "30676b6044dc48fda77bd47e96ab2ce4",
      "0a3af92eda57441899c379e577884b8e",
      "b09b16187d1949d5814f98f13d7e0180",
      "eec3b8f95e95430aa61c1dca858bfcc6",
      "0f87c8ff7f284829be5e902b7d27d7dd",
      "6e861cfd7b264b7ab64b4ded27677e4c"
     ]
    },
    "collapsed": true,
    "id": "abZEXvXG66pf",
    "outputId": "0f17623d-2525-4299-e80d-810d4d222364"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
      "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
      "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
      "You will be able to reuse this secret in all of your notebooks.\n",
      "Please note that authentication is recommended but still optional to access public models or datasets.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bb03170099634b63b0b784a731e59bc8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cf86fd77b10d49af84b064a7099d2475",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d590795fed8341ecb255c79278e072a7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f21e37e360b34bbba3c6d6f40e9be868",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b2f60717c9174701b8cfd8c06b295054",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/612 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f75520edfbd8450fb76553ef23ca2cc3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c43f85b0d2674ae2b5efa6bb9d6b71ce",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/350 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "26f2cb4d62b8481d845f74108a87ab8f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0b746d12b71249b1ab221750cbbead93",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3e62c3b3c6ac45debdb7c5543caa29fd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b37495a810344304a13508fafac371da",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0fe3c086f28348a0b99270d3a1e58555",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Batches:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sentence_transformers import SentenceTransformer\n",
    "\n",
    "# Load embedding model\n",
    "embedder = SentenceTransformer('all-MiniLM-L6-v2')\n",
    "\n",
    "# Create embeddings\n",
    "embeddings = embedder.encode(texts, show_progress_bar=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "id": "yZcJWMEB7B4J"
   },
   "outputs": [],
   "source": [
    "import os\n",
    "from pinecone import Pinecone, ServerlessSpec\n",
    "\n",
    "# Initialize Pinecone client\n",
    "pc = Pinecone(\n",
    "    api_key=os.environ.get(\"pcsk_65KdEB_3qYK83nZKETac9MTrVM2Sgtyb9Jw3HSRfG7FPJGZnbZ38TVTX1uXMYJTj2fTLk1\")\n",
    ")\n",
    "\n",
    "if 'budget-speech-rag' not in pc.list_indexes().names():\n",
    "      pc.create_index(\n",
    "          name='budget-speech-rag',\n",
    "          dimension=384,\n",
    "          metric='cosine',\n",
    "          spec=ServerlessSpec(\n",
    "              cloud='aws',\n",
    "              region='us-east-1'\n",
    "          )\n",
    "      )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "sn53a5sg8kJM",
    "outputId": "92959af0-f750-4cec-c93f-2df4f95356fd"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'upserted_count': 226}"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = pc.Index('budget-speech-rag')\n",
    "vectors = [(f\"id-{i}\", embeddings[i], {\"text\": texts[i]}) for i in range(len(texts))]\n",
    "index.upsert(vectors)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Rmm0s_I89R19",
    "outputId": "b7c41b55-985e-41ac-948e-0d0317358d25"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15. The Government’s philosophy of Sabka Saath Sabka Vikas  has \n",
      "facilitated inclusive development covering in specific, farmers, women, \n",
      "youth, OBCs, Scheduled Castes, Scheduled Tribes, divyangjan and \n",
      "economically weaker sections, and overall priority for the underprivileged \n",
      "(vanchiton ko variyata ). There has also been a sustained focus on Jammu & \n",
      "Kashmir, Ladakh and the North-East. This Budget builds on those efforts.  \n",
      "Agriculture and Cooperation \n",
      "--------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "query = \"explain the philosophy, Sabka Saath Sabka Vikas\"\n",
    "query_embedding = embedder.encode([query])[0]\n",
    "\n",
    "# Search in Pinecone\n",
    "results = index.query(vector=query_embedding.tolist(), top_k=1, include_metadata=True)\n",
    "\n",
    "# Display retrieved texts\n",
    "for match in results['matches']:\n",
    "    print(match['metadata']['text'], '\\n' + '-'*80)\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
